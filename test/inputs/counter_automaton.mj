type st = | Up | Down

fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c)
end where

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = 0
  else
    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if
end where

main (clk) = (c1:[4], c2:[4]) where
  front_edge = clk & not(reg(clk));
  down_edge = not(clk) & reg(clk);
  automaton
  | Up   -> c1 = adder<4>(reg c1, 0b0001, 0);
            c2 = reg c2;
            until down_edge then continue Down
  | Down -> c2 = adder<4>(reg c2, 0b0001, 0);
            c1 = reg c1;
            until front_edge then continue Up
  end
end where
